/**\n * Utility functions for handling partial fill inventory calculations\n * \n * This module provides functions to calculate inventory requirements\n * and adjustments for orders containing partial fills.\n */\n\nimport { OrderLine } from '../types/order';\nimport { Product } from '../types/product';\n\n/**\n * Calculate the actual gas consumption for a partial fill order line\n * @param orderLine - The order line containing fill percentage\n * @param product - Product details for gas capacity calculations\n * @returns Actual gas consumption amount\n */\nexport const calculateGasConsumption = (\n  orderLine: OrderLine,\n  product?: Product\n): number => {\n  if (!orderLine.is_partial_fill || !orderLine.fill_percentage) {\n    return orderLine.quantity; // Full fill - consume full quantity\n  }\n  \n  // For partial fills, the inventory consumption depends on the product type\n  // For cylinders, we still consume full cylinders but fill them partially\n  if (product?.unit_of_measure === 'cylinder' || product?.variant_type === 'cylinder') {\n    // We still need the full cylinders, just fill them less\n    return orderLine.quantity;\n  }\n  \n  // For kg-based products, calculate partial consumption\n  if (product?.unit_of_measure === 'kg') {\n    return orderLine.quantity * (orderLine.fill_percentage / 100);\n  }\n  \n  // Default to full consumption for unknown product types\n  return orderLine.quantity;\n};\n\n/**\n * Calculate cylinder requirements for partial fill orders\n * @param orderLine - The order line containing fill percentage\n * @param product - Product details\n * @returns Number of cylinders needed\n */\nexport const calculateCylinderRequirement = (\n  orderLine: OrderLine,\n  product?: Product\n): number => {\n  // Regardless of fill percentage, we still need the full cylinder count\n  // The fill percentage only affects the gas amount, not cylinder inventory\n  return orderLine.quantity;\n};\n\n/**\n * Calculate gas weight for inventory tracking\n * @param orderLine - The order line containing fill percentage\n * @param product - Product details with capacity\n * @returns Total gas weight in kg\n */\nexport const calculateGasWeight = (\n  orderLine: OrderLine,\n  product?: Product\n): number => {\n  const baseWeight = product?.net_gas_weight_kg || product?.capacity_kg || 0;\n  const fillPercentage = orderLine.fill_percentage || 100;\n  \n  return (baseWeight * orderLine.quantity * fillPercentage) / 100;\n};\n\n/**\n * Generate fill instructions for delivery teams\n * @param orderLines - Array of order lines\n * @returns Formatted fill instructions\n */\nexport const generateFillInstructions = (orderLines: OrderLine[]): string[] => {\n  const instructions: string[] = [];\n  \n  const partialFillLines = orderLines.filter(line => line.is_partial_fill);\n  \n  if (partialFillLines.length === 0) {\n    return ['All products: Standard full fill'];\n  }\n  \n  // Group by fill percentage for efficiency\n  const fillGroups = partialFillLines.reduce((groups, line) => {\n    const percentage = line.fill_percentage || 100;\n    if (!groups[percentage]) {\n      groups[percentage] = [];\n    }\n    groups[percentage].push(line);\n    return groups;\n  }, {} as Record<number, OrderLine[]>);\n  \n  // Generate instructions for each fill percentage\n  Object.entries(fillGroups).forEach(([percentage, lines]) => {\n    if (parseInt(percentage) < 100) {\n      lines.forEach(line => {\n        instructions.push(\n          `${line.product?.name || 'Product'} (${line.product?.sku || 'N/A'}): Fill to ${percentage}% - Qty: ${line.quantity}`\n        );\n        \n        if (line.partial_fill_notes) {\n          instructions.push(`  Note: ${line.partial_fill_notes}`);\n        }\n      });\n    }\n  });\n  \n  // Add full fill items if any\n  const fullFillLines = orderLines.filter(line => !line.is_partial_fill);\n  if (fullFillLines.length > 0) {\n    instructions.push('');\n    instructions.push('Standard full fill:');\n    fullFillLines.forEach(line => {\n      instructions.push(\n        `${line.product?.name || 'Product'} (${line.product?.sku || 'N/A'}): Qty: ${line.quantity}`\n      );\n    });\n  }\n  \n  return instructions;\n};\n\n/**\n * Check if an order contains any partial fills\n * @param orderLines - Array of order lines to check\n * @returns True if any line has partial fill\n */\nexport const hasPartialFills = (orderLines: OrderLine[]): boolean => {\n  return orderLines.some(line => line.is_partial_fill);\n};\n\n/**\n * Calculate total fill percentage for an order (weighted by quantity)\n * @param orderLines - Array of order lines\n * @returns Average fill percentage weighted by quantity\n */\nexport const calculateAverageFillPercentage = (orderLines: OrderLine[]): number => {\n  if (orderLines.length === 0) return 100;\n  \n  let totalWeightedFill = 0;\n  let totalQuantity = 0;\n  \n  orderLines.forEach(line => {\n    const fillPercentage = line.fill_percentage || 100;\n    totalWeightedFill += fillPercentage * line.quantity;\n    totalQuantity += line.quantity;\n  });\n  \n  return totalQuantity > 0 ? totalWeightedFill / totalQuantity : 100;\n};\n\n/**\n * Export order lines with partial fill information for external systems\n * @param orderLines - Array of order lines\n * @param includeFullFills - Whether to include full fill lines in export\n * @returns Formatted export data\n */\nexport const exportPartialFillData = (\n  orderLines: OrderLine[],\n  includeFullFills: boolean = true\n) => {\n  return orderLines\n    .filter(line => includeFullFills || line.is_partial_fill)\n    .map(line => ({\n      product_sku: line.product?.sku || 'N/A',\n      product_name: line.product?.name || 'Unknown',\n      quantity: line.quantity,\n      fill_percentage: line.fill_percentage || 100,\n      is_partial_fill: line.is_partial_fill || false,\n      partial_fill_notes: line.partial_fill_notes || '',\n      unit_price: line.unit_price,\n      subtotal: line.subtotal || line.quantity * line.unit_price,\n      estimated_gas_consumption: calculateGasConsumption(line, line.product as Product),\n      estimated_gas_weight_kg: calculateGasWeight(line, line.product as Product),\n    }));\n};