{
  "name": "order-management-system",
  "version": "1.0.0",
  "description": "LPG Order Management System API tools for voice agents and automation",
  "author": "Order Management System",
  "license": "MIT",
  "tools": [
    {
      "name": "list_orders",
      "description": "Retrieve orders with filtering, search, and pagination. Use for finding orders by status, customer, or date range.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["draft", "confirmed", "scheduled", "en_route", "delivered", "invoiced", "cancelled"],
            "description": "Filter orders by status"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "Filter orders for specific customer"
          },
          "search": {
            "type": "string",
            "description": "Search orders by ID or customer name"
          },
          "order_date_from": {
            "type": "string",
            "format": "date",
            "description": "Start date for order date filter (YYYY-MM-DD)"
          },
          "order_date_to": {
            "type": "string",
            "format": "date",
            "description": "End date for order date filter (YYYY-MM-DD)"
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Page number for pagination"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50,
            "description": "Number of orders per page"
          }
        }
      },
      "endpoint": "/api/v1/trpc/orders.list",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "get_order",
      "description": "Get detailed information about a specific order including customer details, line items, and delivery information.",
      "inputSchema": {
        "type": "object",
        "required": ["order_id"],
        "properties": {
          "order_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the order"
          }
        }
      },
      "endpoint": "/api/v1/trpc/orders.getById",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "create_order",
      "description": "Create a new order for a customer with specified products and quantities. Automatically calculates totals and validates inventory.",
      "inputSchema": {
        "type": "object",
        "required": ["customer_id", "order_lines"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer placing the order"
          },
          "delivery_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the delivery address (optional, uses customer default if not provided)"
          },
          "scheduled_date": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled delivery date and time"
          },
          "notes": {
            "type": "string",
            "description": "Special instructions or notes for the order"
          },
          "order_lines": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "required": ["product_id", "quantity"],
              "properties": {
                "product_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the product to order"
                },
                "quantity": {
                  "type": "number",
                  "minimum": 0.01,
                  "description": "Quantity of the product to order"
                },
                "unit_price": {
                  "type": "number",
                  "minimum": 0,
                  "description": "Override unit price (optional, uses current price if not provided)"
                }
              }
            }
          }
        }
      },
      "endpoint": "/api/v1/trpc/orders.create",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "update_order_status",
      "description": "Update order status with automatic inventory management (reservations, fulfillment, releases). Handles business rules for status transitions.",
      "inputSchema": {
        "type": "object",
        "required": ["order_id", "new_status"],
        "properties": {
          "order_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order to update"
          },
          "new_status": {
            "type": "string",
            "enum": ["draft", "confirmed", "scheduled", "en_route", "delivered", "invoiced", "cancelled"],
            "description": "New status for the order"
          },
          "scheduled_date": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled date when changing to 'scheduled' status"
          },
          "reason": {
            "type": "string",
            "description": "Reason for status change (especially for cancellations)"
          }
        }
      },
      "endpoint": "/api/v1/trpc/orders.updateStatus",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "calculate_order_total",
      "description": "Recalculate order totals including taxes and line item subtotals. Use when order lines or pricing changes.",
      "inputSchema": {
        "type": "object",
        "required": ["order_id"],
        "properties": {
          "order_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order to recalculate"
          }
        }
      },
      "endpoint": "/api/v1/trpc/orders.calculateTotal",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "list_customers",
      "description": "Retrieve customers with search and pagination. Use for finding customers by name, email, or account status.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Search customers by name, email, or phone"
          },
          "status": {
            "type": "string",
            "description": "Filter by account status"
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          }
        }
      },
      "endpoint": "/api/v1/trpc/customers.list",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "get_customer",
      "description": "Get detailed customer information including primary address and account details.",
      "inputSchema": {
        "type": "object",
        "required": ["customer_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the customer"
          }
        }
      },
      "endpoint": "/api/v1/trpc/customers.getById",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "get_customer_order_history",
      "description": "Get order history for a specific customer with filtering options.",
      "inputSchema": {
        "type": "object",
        "required": ["customer_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "status": {
            "type": "string",
            "enum": ["draft", "confirmed", "scheduled", "en_route", "delivered", "invoiced", "cancelled"],
            "description": "Filter by order status"
          }
        }
      },
      "endpoint": "/api/v1/trpc/customers.getOrderHistory",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "list_inventory",
      "description": "Retrieve inventory levels with filtering by warehouse or product. Use for checking stock availability.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "warehouse_id": {
            "type": "string",
            "format": "uuid",
            "description": "Filter inventory for specific warehouse"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "Filter inventory for specific product"
          },
          "low_stock_only": {
            "type": "boolean",
            "default": false,
            "description": "Show only products with low stock levels"
          }
        }
      },
      "endpoint": "/api/v1/trpc/inventory.list",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "adjust_inventory",
      "description": "Adjust inventory levels for a product. Use for stock corrections, receipts, or adjustments.",
      "inputSchema": {
        "type": "object",
        "required": ["inventory_id", "adjustment_type", "quantity"],
        "properties": {
          "inventory_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the inventory record to adjust"
          },
          "adjustment_type": {
            "type": "string",
            "enum": ["increase", "decrease", "set"],
            "description": "Type of adjustment to make"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity to adjust (positive for increase/set, negative for decrease)"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the adjustment"
          }
        }
      },
      "endpoint": "/api/v1/trpc/inventory.adjustStock",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "transfer_inventory",
      "description": "Transfer inventory between warehouses. Validates stock availability and updates both locations atomically.",
      "inputSchema": {
        "type": "object",
        "required": ["source_warehouse_id", "destination_warehouse_id", "product_id", "quantity"],
        "properties": {
          "source_warehouse_id": {
            "type": "string",
            "format": "uuid",
            "description": "Warehouse to transfer from"
          },
          "destination_warehouse_id": {
            "type": "string",
            "format": "uuid",
            "description": "Warehouse to transfer to"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "Product to transfer"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.01,
            "description": "Quantity to transfer"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer"
          }
        }
      },
      "endpoint": "/api/v1/trpc/inventory.transferStock",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "calculate_pricing",
      "description": "Calculate dynamic pricing for products based on customer tier, quantity, and current price lists.",
      "inputSchema": {
        "type": "object",
        "required": ["customer_id", "items"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "Customer ID for tier-based pricing"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "required": ["product_id", "quantity"],
              "properties": {
                "product_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Product to price"
                },
                "quantity": {
                  "type": "number",
                  "minimum": 0.01,
                  "description": "Quantity for volume pricing"
                }
              }
            }
          },
          "pricing_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date for pricing calculation (defaults to current date)"
          }
        }
      },
      "endpoint": "/api/v1/trpc/pricing.calculate",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "validate_transfer",
      "description": "Validate a multi-SKU transfer request before execution. Checks stock availability, warehouse capacity, and business rules.",
      "inputSchema": {
        "type": "object",
        "required": ["source_warehouse_id", "destination_warehouse_id", "items"],
        "properties": {
          "source_warehouse_id": {
            "type": "string",
            "format": "uuid",
            "description": "Source warehouse ID"
          },
          "destination_warehouse_id": {
            "type": "string",
            "format": "uuid",
            "description": "Destination warehouse ID"
          },
          "transfer_date": {
            "type": "string",
            "format": "date-time",
            "description": "Planned transfer date"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "required": ["product_id", "quantity"],
              "properties": {
                "product_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Product to transfer"
                },
                "quantity": {
                  "type": "number",
                  "minimum": 0.01,
                  "description": "Quantity to transfer"
                }
              }
            }
          }
        }
      },
      "endpoint": "/api/v1/trpc/transfers.validate",
      "method": "POST",
      "auth": "required"
    },
    {
      "name": "get_dashboard_stats",
      "description": "Get comprehensive business metrics for dashboard display including orders, revenue, inventory, and customer statistics.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "enum": ["today", "week", "month", "quarter", "year"],
            "default": "month",
            "description": "Time period for statistics"
          }
        }
      },
      "endpoint": "/api/v1/trpc/analytics.getDashboardStats",
      "method": "GET",
      "auth": "required"
    },
    {
      "name": "health_check",
      "description": "Check system health including database connectivity, RLS policies, and tenant access validation.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "endpoint": "/api/v1/trpc/admin.healthCheck",
      "method": "GET",
      "auth": "required"
    }
  ],
  "authentication": {
    "type": "bearer",
    "description": "Requires JWT token from Supabase authentication in Authorization header as 'Bearer <token>'"
  },
  "base_url": "http://localhost:3001",
  "rate_limits": {
    "requests_per_minute": 100,
    "burst_limit": 20
  },
  "error_handling": {
    "standard_errors": {
      "400": "Bad Request - Invalid input parameters",
      "401": "Unauthorized - Missing or invalid authentication",
      "403": "Forbidden - Insufficient permissions or tenant isolation violation",
      "404": "Not Found - Resource does not exist",
      "500": "Internal Server Error - Unexpected server error"
    },
    "format": "tRPC standard error format with code, message, and optional details"
  },
  "idempotency": {
    "description": "All mutation operations are designed to be idempotent for safe retry by AI agents",
    "examples": [
      "Status updates check current state before applying changes",
      "Inventory reservations handle double-reservation attempts gracefully",
      "Order calculations can be run multiple times without side effects"
    ]
  }
}